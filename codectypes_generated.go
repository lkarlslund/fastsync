//go:build go1.6
// +build go1.6

// Code generated by codecgen - DO NOT EDIT.

package fastsync

import (
	"errors"
	codec1978 "github.com/ugorji/go/codec"
	pkg1_fs "io/fs"
	"runtime"
	"sort"
	"strconv"
	"syscall"
)

const (
	// ----- content types ----
	codecSelferCcUTF87331 = 1
	codecSelferCcRAW7331  = 255
	// ----- value types used ----
	codecSelferValueTypeArray7331     = 10
	codecSelferValueTypeMap7331       = 9
	codecSelferValueTypeString7331    = 6
	codecSelferValueTypeInt7331       = 2
	codecSelferValueTypeUint7331      = 3
	codecSelferValueTypeFloat7331     = 4
	codecSelferValueTypeNil7331       = 1
	codecSelferBitsize7331            = uint8(32 << (^uint(0) >> 63))
	codecSelferDecContainerLenNil7331 = -2147483648
)

var (
	errCodecSelferOnlyMapOrArrayEncodeToStruct7331                = errors.New(`only encoded map or array can be decoded into a struct`)
	_                                              sort.Interface = nil
)

type codecSelfer7331 struct{}

func codecSelfer7331False() bool { return false }
func codecSelfer7331True() bool  { return true }

type codecSelfer7331stringSlice []string

func (p codecSelfer7331stringSlice) Len() int           { return len(p) }
func (p codecSelfer7331stringSlice) Swap(i, j int)      { p[uint(i)], p[uint(j)] = p[uint(j)], p[uint(i)] }
func (p codecSelfer7331stringSlice) Less(i, j int) bool { return p[uint(i)] < p[uint(j)] }

type codecSelfer7331uint64Slice []uint64

func (p codecSelfer7331uint64Slice) Len() int           { return len(p) }
func (p codecSelfer7331uint64Slice) Swap(i, j int)      { p[uint(i)], p[uint(j)] = p[uint(j)], p[uint(i)] }
func (p codecSelfer7331uint64Slice) Less(i, j int) bool { return p[uint(i)] < p[uint(j)] }

type codecSelfer7331int64Slice []int64

func (p codecSelfer7331int64Slice) Len() int           { return len(p) }
func (p codecSelfer7331int64Slice) Swap(i, j int)      { p[uint(i)], p[uint(j)] = p[uint(j)], p[uint(i)] }
func (p codecSelfer7331int64Slice) Less(i, j int) bool { return p[uint(i)] < p[uint(j)] }

type codecSelfer7331float64Slice []float64

func (p codecSelfer7331float64Slice) Len() int           { return len(p) }
func (p codecSelfer7331float64Slice) Swap(i, j int)      { p[uint(i)], p[uint(j)] = p[uint(j)], p[uint(i)] }
func (p codecSelfer7331float64Slice) Less(i, j int) bool { return p[uint(i)] < p[uint(j)] }

func init() {
	if codec1978.GenVersion != 28 {
		_, file, _, _ := runtime.Caller(0)
		ver := strconv.FormatInt(int64(codec1978.GenVersion), 10)
		panic(errors.New("codecgen version mismatch: current: 28, need " + ver + ". Re-generate file: " + file))
	}
	if false { // reference the types, but skip this branch at build/run time
		var _ pkg1_fs.FileMode
		var _ syscall.Timespec
	}
}

func (FileInfo) codecSelferViaCodecgen() {}
func (x *FileInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer7331
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if z.EncBasicHandle().CheckCircularRef {
		z.EncEncode(x)
		return
	}
	if x == nil {
		r.EncodeNil()
	} else {
		yy2arr2 := z.EncBasicHandle().StructToArray
		_ = yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(16)
			z.EncWriteArrayElem()
			r.EncodeString(string(x.Name))
			z.EncWriteArrayElem()
			if yyxt20 := z.Extension(x.Mode); yyxt20 != nil {
				z.EncExtension(x.Mode, yyxt20)
			} else {
				r.EncodeUint(uint64(x.Mode))
			}
			z.EncWriteArrayElem()
			r.EncodeInt(int64(x.Size))
			z.EncWriteArrayElem()
			r.EncodeBool(bool(x.IsDir))
			z.EncWriteArrayElem()
			r.EncodeUint(uint64(x.Permissions))
			z.EncWriteArrayElem()
			if x.Xattrs == nil {
				r.EncodeNil()
			} else {
				z.F.EncMapStringBytesV(x.Xattrs, e)
			} // end block: if x.Xattrs map == nil
			z.EncWriteArrayElem()
			r.EncodeUint(uint64(x.Owner))
			z.EncWriteArrayElem()
			r.EncodeUint(uint64(x.Group))
			z.EncWriteArrayElem()
			r.EncodeUint(uint64(x.Inode))
			z.EncWriteArrayElem()
			r.EncodeUint(uint64(x.Nlink))
			z.EncWriteArrayElem()
			r.EncodeUint(uint64(x.Dev))
			z.EncWriteArrayElem()
			r.EncodeUint(uint64(x.Rdev))
			z.EncWriteArrayElem()
			r.EncodeString(string(x.LinkTo))
			z.EncWriteArrayElem()
			yy32 := &x.Atim
			if yyxt33 := z.Extension(yy32); yyxt33 != nil {
				z.EncExtension(yy32, yyxt33)
			} else {
				z.EncFallback(yy32)
			}
			z.EncWriteArrayElem()
			yy34 := &x.Mtim
			if yyxt35 := z.Extension(yy34); yyxt35 != nil {
				z.EncExtension(yy34, yyxt35)
			} else {
				z.EncFallback(yy34)
			}
			z.EncWriteArrayElem()
			yy36 := &x.Ctim
			if yyxt37 := z.Extension(yy36); yyxt37 != nil {
				z.EncExtension(yy36, yyxt37)
			} else {
				z.EncFallback(yy36)
			}
			z.EncWriteArrayEnd()
		} else {
			z.EncWriteMapStart(16)
			if z.EncBasicHandle().Canonical {
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"Atim\"")
				} else {
					r.EncodeString(`Atim`)
				}
				z.EncWriteMapElemValue()
				yy38 := &x.Atim
				if yyxt39 := z.Extension(yy38); yyxt39 != nil {
					z.EncExtension(yy38, yyxt39)
				} else {
					z.EncFallback(yy38)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"Ctim\"")
				} else {
					r.EncodeString(`Ctim`)
				}
				z.EncWriteMapElemValue()
				yy40 := &x.Ctim
				if yyxt41 := z.Extension(yy40); yyxt41 != nil {
					z.EncExtension(yy40, yyxt41)
				} else {
					z.EncFallback(yy40)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"Dev\"")
				} else {
					r.EncodeString(`Dev`)
				}
				z.EncWriteMapElemValue()
				r.EncodeUint(uint64(x.Dev))
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"Group\"")
				} else {
					r.EncodeString(`Group`)
				}
				z.EncWriteMapElemValue()
				r.EncodeUint(uint64(x.Group))
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"Inode\"")
				} else {
					r.EncodeString(`Inode`)
				}
				z.EncWriteMapElemValue()
				r.EncodeUint(uint64(x.Inode))
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"IsDir\"")
				} else {
					r.EncodeString(`IsDir`)
				}
				z.EncWriteMapElemValue()
				r.EncodeBool(bool(x.IsDir))
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"LinkTo\"")
				} else {
					r.EncodeString(`LinkTo`)
				}
				z.EncWriteMapElemValue()
				r.EncodeString(string(x.LinkTo))
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"Mode\"")
				} else {
					r.EncodeString(`Mode`)
				}
				z.EncWriteMapElemValue()
				if yyxt47 := z.Extension(x.Mode); yyxt47 != nil {
					z.EncExtension(x.Mode, yyxt47)
				} else {
					r.EncodeUint(uint64(x.Mode))
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"Mtim\"")
				} else {
					r.EncodeString(`Mtim`)
				}
				z.EncWriteMapElemValue()
				yy48 := &x.Mtim
				if yyxt49 := z.Extension(yy48); yyxt49 != nil {
					z.EncExtension(yy48, yyxt49)
				} else {
					z.EncFallback(yy48)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"Name\"")
				} else {
					r.EncodeString(`Name`)
				}
				z.EncWriteMapElemValue()
				r.EncodeString(string(x.Name))
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"Nlink\"")
				} else {
					r.EncodeString(`Nlink`)
				}
				z.EncWriteMapElemValue()
				r.EncodeUint(uint64(x.Nlink))
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"Owner\"")
				} else {
					r.EncodeString(`Owner`)
				}
				z.EncWriteMapElemValue()
				r.EncodeUint(uint64(x.Owner))
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"Permissions\"")
				} else {
					r.EncodeString(`Permissions`)
				}
				z.EncWriteMapElemValue()
				r.EncodeUint(uint64(x.Permissions))
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"Rdev\"")
				} else {
					r.EncodeString(`Rdev`)
				}
				z.EncWriteMapElemValue()
				r.EncodeUint(uint64(x.Rdev))
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"Size\"")
				} else {
					r.EncodeString(`Size`)
				}
				z.EncWriteMapElemValue()
				r.EncodeInt(int64(x.Size))
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"Xattrs\"")
				} else {
					r.EncodeString(`Xattrs`)
				}
				z.EncWriteMapElemValue()
				if x.Xattrs == nil {
					r.EncodeNil()
				} else {
					z.F.EncMapStringBytesV(x.Xattrs, e)
				} // end block: if x.Xattrs map == nil
			} else {
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"Name\"")
				} else {
					r.EncodeString(`Name`)
				}
				z.EncWriteMapElemValue()
				r.EncodeString(string(x.Name))
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"Mode\"")
				} else {
					r.EncodeString(`Mode`)
				}
				z.EncWriteMapElemValue()
				if yyxt58 := z.Extension(x.Mode); yyxt58 != nil {
					z.EncExtension(x.Mode, yyxt58)
				} else {
					r.EncodeUint(uint64(x.Mode))
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"Size\"")
				} else {
					r.EncodeString(`Size`)
				}
				z.EncWriteMapElemValue()
				r.EncodeInt(int64(x.Size))
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"IsDir\"")
				} else {
					r.EncodeString(`IsDir`)
				}
				z.EncWriteMapElemValue()
				r.EncodeBool(bool(x.IsDir))
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"Permissions\"")
				} else {
					r.EncodeString(`Permissions`)
				}
				z.EncWriteMapElemValue()
				r.EncodeUint(uint64(x.Permissions))
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"Xattrs\"")
				} else {
					r.EncodeString(`Xattrs`)
				}
				z.EncWriteMapElemValue()
				if x.Xattrs == nil {
					r.EncodeNil()
				} else {
					z.F.EncMapStringBytesV(x.Xattrs, e)
				} // end block: if x.Xattrs map == nil
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"Owner\"")
				} else {
					r.EncodeString(`Owner`)
				}
				z.EncWriteMapElemValue()
				r.EncodeUint(uint64(x.Owner))
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"Group\"")
				} else {
					r.EncodeString(`Group`)
				}
				z.EncWriteMapElemValue()
				r.EncodeUint(uint64(x.Group))
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"Inode\"")
				} else {
					r.EncodeString(`Inode`)
				}
				z.EncWriteMapElemValue()
				r.EncodeUint(uint64(x.Inode))
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"Nlink\"")
				} else {
					r.EncodeString(`Nlink`)
				}
				z.EncWriteMapElemValue()
				r.EncodeUint(uint64(x.Nlink))
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"Dev\"")
				} else {
					r.EncodeString(`Dev`)
				}
				z.EncWriteMapElemValue()
				r.EncodeUint(uint64(x.Dev))
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"Rdev\"")
				} else {
					r.EncodeString(`Rdev`)
				}
				z.EncWriteMapElemValue()
				r.EncodeUint(uint64(x.Rdev))
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"LinkTo\"")
				} else {
					r.EncodeString(`LinkTo`)
				}
				z.EncWriteMapElemValue()
				r.EncodeString(string(x.LinkTo))
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"Atim\"")
				} else {
					r.EncodeString(`Atim`)
				}
				z.EncWriteMapElemValue()
				yy70 := &x.Atim
				if yyxt71 := z.Extension(yy70); yyxt71 != nil {
					z.EncExtension(yy70, yyxt71)
				} else {
					z.EncFallback(yy70)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"Mtim\"")
				} else {
					r.EncodeString(`Mtim`)
				}
				z.EncWriteMapElemValue()
				yy72 := &x.Mtim
				if yyxt73 := z.Extension(yy72); yyxt73 != nil {
					z.EncExtension(yy72, yyxt73)
				} else {
					z.EncFallback(yy72)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"Ctim\"")
				} else {
					r.EncodeString(`Ctim`)
				}
				z.EncWriteMapElemValue()
				yy74 := &x.Ctim
				if yyxt75 := z.Extension(yy74); yyxt75 != nil {
					z.EncExtension(yy74, yyxt75)
				} else {
					z.EncFallback(yy74)
				}
			}
			z.EncWriteMapEnd()
		}
	}
}

func (x *FileInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer7331
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil7331 {
		*(x) = FileInfo{}
	} else if yyct2 == codecSelferValueTypeMap7331 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray7331 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct7331)
	}
}

func (x *FileInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer7331
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; z.DecContainerNext(yyj3, l, yyhl3); yyj3++ {
		z.DecReadMapElemKey()
		yys3 := r.DecodeStringAsBytes()
		z.DecReadMapElemValue()
		switch string(yys3) {
		case "Name":
			x.Name = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
		case "Mode":
			if yyxt6 := z.Extension(x.Mode); yyxt6 != nil {
				z.DecExtension(&x.Mode, yyxt6)
			} else {
				x.Mode = (pkg1_fs.FileMode)(z.C.UintV(r.DecodeUint64(), 32))
			}
		case "Size":
			x.Size = (int64)(r.DecodeInt64())
		case "IsDir":
			x.IsDir = (bool)(r.DecodeBool())
		case "Permissions":
			x.Permissions = (uint32)(z.C.UintV(r.DecodeUint64(), 32))
		case "Xattrs":
			z.F.DecMapStringBytesX(&x.Xattrs, d)
		case "Owner":
			x.Owner = (uint32)(z.C.UintV(r.DecodeUint64(), 32))
		case "Group":
			x.Group = (uint32)(z.C.UintV(r.DecodeUint64(), 32))
		case "Inode":
			x.Inode = (uint64)(r.DecodeUint64())
		case "Nlink":
			x.Nlink = (uint64)(r.DecodeUint64())
		case "Dev":
			x.Dev = (uint64)(r.DecodeUint64())
		case "Rdev":
			x.Rdev = (uint64)(r.DecodeUint64())
		case "LinkTo":
			x.LinkTo = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
		case "Atim":
			if yyxt20 := z.Extension(x.Atim); yyxt20 != nil {
				z.DecExtension(&x.Atim, yyxt20)
			} else {
				z.DecFallback(&x.Atim, false)
			}
		case "Mtim":
			if yyxt22 := z.Extension(x.Mtim); yyxt22 != nil {
				z.DecExtension(&x.Mtim, yyxt22)
			} else {
				z.DecFallback(&x.Mtim, false)
			}
		case "Ctim":
			if yyxt24 := z.Extension(x.Ctim); yyxt24 != nil {
				z.DecExtension(&x.Ctim, yyxt24)
			} else {
				z.DecFallback(&x.Ctim, false)
			}
		default:
			z.DecStructFieldNotFound(-1, string(yys3))
		} // end switch yys3
	} // end for yyj3
}

func (x *FileInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer7331
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyj25 int
	var yyb25 bool
	var yyhl25 bool = l >= 0
	yyb25 = !z.DecContainerNext(yyj25, l, yyhl25)
	if yyb25 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Name = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
	yyj25++
	yyb25 = !z.DecContainerNext(yyj25, l, yyhl25)
	if yyb25 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if yyxt28 := z.Extension(x.Mode); yyxt28 != nil {
		z.DecExtension(&x.Mode, yyxt28)
	} else {
		x.Mode = (pkg1_fs.FileMode)(z.C.UintV(r.DecodeUint64(), 32))
	}
	yyj25++
	yyb25 = !z.DecContainerNext(yyj25, l, yyhl25)
	if yyb25 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Size = (int64)(r.DecodeInt64())
	yyj25++
	yyb25 = !z.DecContainerNext(yyj25, l, yyhl25)
	if yyb25 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.IsDir = (bool)(r.DecodeBool())
	yyj25++
	yyb25 = !z.DecContainerNext(yyj25, l, yyhl25)
	if yyb25 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Permissions = (uint32)(z.C.UintV(r.DecodeUint64(), 32))
	yyj25++
	yyb25 = !z.DecContainerNext(yyj25, l, yyhl25)
	if yyb25 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecMapStringBytesX(&x.Xattrs, d)
	yyj25++
	yyb25 = !z.DecContainerNext(yyj25, l, yyhl25)
	if yyb25 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Owner = (uint32)(z.C.UintV(r.DecodeUint64(), 32))
	yyj25++
	yyb25 = !z.DecContainerNext(yyj25, l, yyhl25)
	if yyb25 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Group = (uint32)(z.C.UintV(r.DecodeUint64(), 32))
	yyj25++
	yyb25 = !z.DecContainerNext(yyj25, l, yyhl25)
	if yyb25 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Inode = (uint64)(r.DecodeUint64())
	yyj25++
	yyb25 = !z.DecContainerNext(yyj25, l, yyhl25)
	if yyb25 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Nlink = (uint64)(r.DecodeUint64())
	yyj25++
	yyb25 = !z.DecContainerNext(yyj25, l, yyhl25)
	if yyb25 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Dev = (uint64)(r.DecodeUint64())
	yyj25++
	yyb25 = !z.DecContainerNext(yyj25, l, yyhl25)
	if yyb25 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Rdev = (uint64)(r.DecodeUint64())
	yyj25++
	yyb25 = !z.DecContainerNext(yyj25, l, yyhl25)
	if yyb25 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.LinkTo = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
	yyj25++
	yyb25 = !z.DecContainerNext(yyj25, l, yyhl25)
	if yyb25 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if yyxt42 := z.Extension(x.Atim); yyxt42 != nil {
		z.DecExtension(&x.Atim, yyxt42)
	} else {
		z.DecFallback(&x.Atim, false)
	}
	yyj25++
	yyb25 = !z.DecContainerNext(yyj25, l, yyhl25)
	if yyb25 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if yyxt44 := z.Extension(x.Mtim); yyxt44 != nil {
		z.DecExtension(&x.Mtim, yyxt44)
	} else {
		z.DecFallback(&x.Mtim, false)
	}
	yyj25++
	yyb25 = !z.DecContainerNext(yyj25, l, yyhl25)
	if yyb25 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if yyxt46 := z.Extension(x.Ctim); yyxt46 != nil {
		z.DecExtension(&x.Ctim, yyxt46)
	} else {
		z.DecFallback(&x.Ctim, false)
	}
	yyj25++
	for ; z.DecContainerNext(yyj25, l, yyhl25); yyj25++ {
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj25-1, "")
	}
}

func (x *FileInfo) IsCodecEmpty() bool {
	return !(x.Name != "" || x.Mode != 0 || x.Size != 0 || bool(x.IsDir) || x.Permissions != 0 || len(x.Xattrs) != 0 || x.Owner != 0 || x.Group != 0 || x.Inode != 0 || x.Nlink != 0 || x.Dev != 0 || x.Rdev != 0 || x.LinkTo != "" || x.Atim != syscall.Timespec{} || x.Mtim != syscall.Timespec{} || x.Ctim != syscall.Timespec{} || false)
}

func (FileListResponse) codecSelferViaCodecgen() {}
func (x *FileListResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer7331
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if z.EncBasicHandle().CheckCircularRef {
		z.EncEncode(x)
		return
	}
	if x == nil {
		r.EncodeNil()
	} else {
		yy2arr2 := z.EncBasicHandle().StructToArray
		_ = yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(2)
			z.EncWriteArrayElem()
			r.EncodeString(string(x.ParentDirectory))
			z.EncWriteArrayElem()
			if x.Files == nil {
				r.EncodeNil()
			} else {
				h.encSliceFileInfo(([]FileInfo)(x.Files), e)
			} // end block: if x.Files slice == nil
			z.EncWriteArrayEnd()
		} else {
			z.EncWriteMapStart(2)
			if z.EncBasicHandle().Canonical {
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"Files\"")
				} else {
					r.EncodeString(`Files`)
				}
				z.EncWriteMapElemValue()
				if x.Files == nil {
					r.EncodeNil()
				} else {
					h.encSliceFileInfo(([]FileInfo)(x.Files), e)
				} // end block: if x.Files slice == nil
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"ParentDirectory\"")
				} else {
					r.EncodeString(`ParentDirectory`)
				}
				z.EncWriteMapElemValue()
				r.EncodeString(string(x.ParentDirectory))
			} else {
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"ParentDirectory\"")
				} else {
					r.EncodeString(`ParentDirectory`)
				}
				z.EncWriteMapElemValue()
				r.EncodeString(string(x.ParentDirectory))
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"Files\"")
				} else {
					r.EncodeString(`Files`)
				}
				z.EncWriteMapElemValue()
				if x.Files == nil {
					r.EncodeNil()
				} else {
					h.encSliceFileInfo(([]FileInfo)(x.Files), e)
				} // end block: if x.Files slice == nil
			}
			z.EncWriteMapEnd()
		}
	}
}

func (x *FileListResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer7331
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil7331 {
		*(x) = FileListResponse{}
	} else if yyct2 == codecSelferValueTypeMap7331 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray7331 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct7331)
	}
}

func (x *FileListResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer7331
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; z.DecContainerNext(yyj3, l, yyhl3); yyj3++ {
		z.DecReadMapElemKey()
		yys3 := r.DecodeStringAsBytes()
		z.DecReadMapElemValue()
		switch string(yys3) {
		case "ParentDirectory":
			x.ParentDirectory = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
		case "Files":
			h.decSliceFileInfo((*[]FileInfo)(&x.Files), d)
		default:
			z.DecStructFieldNotFound(-1, string(yys3))
		} // end switch yys3
	} // end for yyj3
}

func (x *FileListResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer7331
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyj7 int
	var yyb7 bool
	var yyhl7 bool = l >= 0
	yyb7 = !z.DecContainerNext(yyj7, l, yyhl7)
	if yyb7 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.ParentDirectory = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
	yyj7++
	yyb7 = !z.DecContainerNext(yyj7, l, yyhl7)
	if yyb7 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	h.decSliceFileInfo((*[]FileInfo)(&x.Files), d)
	yyj7++
	for ; z.DecContainerNext(yyj7, l, yyhl7); yyj7++ {
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj7-1, "")
	}
}

func (x *FileListResponse) IsCodecEmpty() bool {
	return !(x.ParentDirectory != "" || len(x.Files) != 0 || false)
}

func (GetChunkArgs) codecSelferViaCodecgen() {}
func (x *GetChunkArgs) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer7331
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if z.EncBasicHandle().CheckCircularRef {
		z.EncEncode(x)
		return
	}
	if x == nil {
		r.EncodeNil()
	} else {
		yy2arr2 := z.EncBasicHandle().StructToArray
		_ = yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(3)
			z.EncWriteArrayElem()
			r.EncodeString(string(x.Path))
			z.EncWriteArrayElem()
			r.EncodeUint(uint64(x.Offset))
			z.EncWriteArrayElem()
			r.EncodeUint(uint64(x.Size))
			z.EncWriteArrayEnd()
		} else {
			z.EncWriteMapStart(3)
			if z.EncBasicHandle().Canonical {
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"Offset\"")
				} else {
					r.EncodeString(`Offset`)
				}
				z.EncWriteMapElemValue()
				r.EncodeUint(uint64(x.Offset))
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"Path\"")
				} else {
					r.EncodeString(`Path`)
				}
				z.EncWriteMapElemValue()
				r.EncodeString(string(x.Path))
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"Size\"")
				} else {
					r.EncodeString(`Size`)
				}
				z.EncWriteMapElemValue()
				r.EncodeUint(uint64(x.Size))
			} else {
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"Path\"")
				} else {
					r.EncodeString(`Path`)
				}
				z.EncWriteMapElemValue()
				r.EncodeString(string(x.Path))
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"Offset\"")
				} else {
					r.EncodeString(`Offset`)
				}
				z.EncWriteMapElemValue()
				r.EncodeUint(uint64(x.Offset))
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"Size\"")
				} else {
					r.EncodeString(`Size`)
				}
				z.EncWriteMapElemValue()
				r.EncodeUint(uint64(x.Size))
			}
			z.EncWriteMapEnd()
		}
	}
}

func (x *GetChunkArgs) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer7331
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil7331 {
		*(x) = GetChunkArgs{}
	} else if yyct2 == codecSelferValueTypeMap7331 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray7331 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct7331)
	}
}

func (x *GetChunkArgs) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer7331
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; z.DecContainerNext(yyj3, l, yyhl3); yyj3++ {
		z.DecReadMapElemKey()
		yys3 := r.DecodeStringAsBytes()
		z.DecReadMapElemValue()
		switch string(yys3) {
		case "Path":
			x.Path = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
		case "Offset":
			x.Offset = (uint64)(r.DecodeUint64())
		case "Size":
			x.Size = (uint64)(r.DecodeUint64())
		default:
			z.DecStructFieldNotFound(-1, string(yys3))
		} // end switch yys3
	} // end for yyj3
}

func (x *GetChunkArgs) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer7331
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyj7 int
	var yyb7 bool
	var yyhl7 bool = l >= 0
	yyb7 = !z.DecContainerNext(yyj7, l, yyhl7)
	if yyb7 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Path = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
	yyj7++
	yyb7 = !z.DecContainerNext(yyj7, l, yyhl7)
	if yyb7 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Offset = (uint64)(r.DecodeUint64())
	yyj7++
	yyb7 = !z.DecContainerNext(yyj7, l, yyhl7)
	if yyb7 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Size = (uint64)(r.DecodeUint64())
	yyj7++
	for ; z.DecContainerNext(yyj7, l, yyhl7); yyj7++ {
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj7-1, "")
	}
}

func (x *GetChunkArgs) IsCodecEmpty() bool {
	return !(x.Path != "" || x.Offset != 0 || x.Size != 0 || false)
}

func (x codecSelfer7331) encSliceFileInfo(v []FileInfo, e *codec1978.Encoder) {
	var h codecSelfer7331
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if v == nil {
		r.EncodeNil()
		return
	}
	z.EncWriteArrayStart(len(v))
	for yyv1 := range v {
		z.EncWriteArrayElem()
		yy2 := &v[yyv1]
		if yyxt3 := z.Extension(yy2); yyxt3 != nil {
			z.EncExtension(yy2, yyxt3)
		} else {
			yy2.CodecEncodeSelf(e)
		}
	}
	z.EncWriteArrayEnd()
}

func (x codecSelfer7331) decSliceFileInfo(v *[]FileInfo, d *codec1978.Decoder) {
	var h codecSelfer7331
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyh1.IsNil {
		if yyv1 != nil {
			yyv1 = nil
			yyc1 = true
		}
	} else if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []FileInfo{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 152)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]FileInfo, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		for yyj1 = 0; z.DecContainerNext(yyj1, yyl1, yyhl1); yyj1++ {
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 152)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]FileInfo, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, FileInfo{})
				yyc1 = true
			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if yyxt3 := z.Extension(yyv1[yyj1]); yyxt3 != nil {
					z.DecExtension(&yyv1[yyj1], yyxt3)
				} else {
					yyv1[yyj1].CodecDecodeSelf(d)
				}
			}
		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []FileInfo{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}
